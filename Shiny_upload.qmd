---
title: "Shiny"
author: "Gop Arop"
format: 
  html:
    embed-resources: true
    warning: false
editor_options: 
  chunk_output_type: console
---

```{r}
library(tidyverse)
library(BasketballAnalyzeR)
library(hoopR)
library(plotly)
library(shiny)
library(knitr)
library(glue)
```

```{r}
seasons_choice <- paste0(substr(seq(2023, 1999), 1, 4), "-", substr(seq(2024, 2000), 3, 4))

players <-  nba_leagueleaders(season = "2022-23", stat_category = "PTS", per_mode = "PerGame")

players <- players[["LeagueLeaders"]] |>
  mutate(PTS = as.numeric(PTS)) |> select(-(1:2), -(4:7), -(17:23))

players <- players |>
  arrange(desc(PTS)) |>
  slice(1:10)  |> 
  select(-`PLAYER`) |>
  select(-(1:3), -(7:9)) |>
  rename("3 Pointers Made Per Game" = `FG3M`, "3 Pointers Attempted Per Game" = `FG3A`, "3 Point Percentage" = `FG3_PCT`, "Total Points Per Game" = `PTS`, "Player Efficiency" = `EFF`)
var_choices <- names(players) 
```

```{r}
ui <- fluidPage(
  tabsetPanel(
    tabPanel("Shot Chart", fluid = TRUE,
             sidebarLayout(
               sidebarPanel(tableOutput("player_id_names"),
                            selectInput("player_sel", label = "Select a Player", choices = NULL),
                            selectInput("season_sel", label = "Select a Season", choices = seasons_choice)
               ),
               mainPanel(plotOutput("shot_chart", height = "580px"), tableOutput("sum_stats"))
             )
    ),
    tabPanel("Quadrant Plot", fluid = TRUE, 
             sidebarLayout(
               sidebarPanel(
                 selectInput("xvar_sel", label = "Select a Variable for X-Axis", choices = var_choices),
                 selectInput("yvar_sel", label = "Select a Variable for Y-Axis", choices = var_choices),
                 selectInput("season_select", label = "Select a Season", choices = seasons_choice)
               ), 
               mainPanel(plotlyOutput("quad_plot"))))
  )
)

server <- function(input, output, session) {
  
  data_react <- reactive({
    shot_data <-  tibble(nba_shotchartdetail(league_id = '00', player_id = input$player_sel, season = input$season_sel))
    data <- shot_data[[1]][[1]] |> 
      mutate(LOC_X = as.numeric(LOC_X), LOC_Y = as.numeric(LOC_Y), xx = LOC_X/10, yy = LOC_Y/10 - 41.75) |> 
      rename(shot_distance = SHOT_DISTANCE, original_x = LOC_X, original_y = LOC_Y, converted_y = yy, converted_x = xx)
    
  }) 
  
  players_react <- reactive({
    players_original <-  nba_leagueleaders(season = input$season_select, stat_category = "PTS", per_mode = "PerGame")
    
    players_leaders <- players_original[["LeagueLeaders"]] |>
      mutate(PTS = as.numeric(PTS)) |> select(-(1:2), -(4:7), -(17:23))
    
    players_top30 <- players_leaders |>
      arrange(desc(PTS)) |>
      slice(1:30)
    
    players <- players_top30 |>
      mutate_at(vars(-PLAYER, -PTS), as.numeric) |>   
      rename("3 Pointers Made Per Game" = `FG3M`, "3 Pointers Attempted Per Game" = `FG3A`, "3 Point Percentage" = `FG3_PCT`, "Total Points Per Game" = `PTS`, "Player Efficiency" = `EFF`)
    
  })
  
  totals_react <- reactive({
    totals <- nba_leagueleaders(season = input$season_sel, stat_category = "PTS", per_mode = "Totals")
    
    totals <- totals[["LeagueLeaders"]] |>
      mutate(`FGA` = as.numeric(`FGA`), `FG3A` = as.numeric(`FG3A`)) |>
      filter(!is.na(`FGA`), !is.na(`FG3A`))
  })
  
  playerIDs_react <- reactive({
    players_original <-  nba_leagueleaders(season = input$season_sel, stat_category = "PTS", 
                                           per_mode = "PerGame")
    
    players_leaders <- players_original[["LeagueLeaders"]] |>
      mutate(PTS = as.numeric(PTS)) 
    
    players_top10 <- players_leaders |>
      arrange(desc(PTS)) |>
      slice(1:10)
  })
  
  
  observeEvent(input$season_sel, {
    players_df <-  nba_leagueleaders(season = input$season_sel, stat_category = "PTS", per_mode = "PerGame")
    
    players_lead <- players_df[["LeagueLeaders"]] |>
      mutate(PTS = as.numeric(PTS))
    
    players_top10 <- players_lead |>
      arrange(desc(PTS)) |>
      slice(1:10)
    
    player_choices <- players_top10 |> distinct(PLAYER_ID) |> pull(PLAYER_ID)
    
    updateSelectInput(inputId = "player_sel", choices = player_choices)
  })
  
  output$shot_chart <- renderPlot({
    chart <- ggplot(data = data_react(), aes(x = converted_x,y = converted_y, color = EVENT_TYPE)) + geom_point(alpha = 0.7, size = 2.5) + coord_fixed() + labs(title = glue("Shot Chart of Total Field Goals for {data_react()$PLAYER_NAME}", )) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_rect(fill = "white"), axis.title = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), plot.title = element_text(size = 20))
    
    drawNBAcourt(chart, full = FALSE)
    
  })
  
  output$quad_plot <- renderPlotly({
    mean_x <- mean(players_react()[[input$xvar_sel]])
    mean_y <- mean(players_react()[[input$yvar_sel]])
    
    q_plot <- ggplot(players_react(), aes(x=.data[[input$xvar_sel]], y=.data[[input$yvar_sel]], label = PLAYER)) +
      geom_point() +
      theme_minimal() +
      geom_vline(xintercept = mean_x) + geom_hline(yintercept = mean_y) 
    
    ggplotly(q_plot, tooltip = c("label"))
  })
  
  output$sum_stats <- renderTable({
    totals_react() |>
      mutate(`FG2A` = as.numeric(`FGA`) - as.numeric(`FG3A`)) |>
      filter(!is.na(`FG2A`)) |>
      slice(1:100) |>
      summarise(`Proportion of Makes 2s\n for Season` = mean(`FG2A` / `FGA`),
                `Proportion of Makes 3s\n for Season` = mean(`FG3A` / `FGA`))
  })
  
  output$player_id_names <- renderTable({
    playerIDs_react() |>
      select(`PLAYER_ID`, `PLAYER`)
  })
  
  
  
}

shinyApp(ui, server)
```









